version: '3.7'

networks:
  apache_kafka:
    name: apache_kafka

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - apache_kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:6.2.0
    hostname: broker
    container_name: broker
    networks:
      - apache_kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  app:
    build:
      context: .
      dockerfile: Dockerfile.kafka
    container_name: app
    depends_on:
      - broker
    entrypoint:
      - bash
      - -c
      - |
        echo '-----------------------------------------------'
        echo 'Stalling for the homies...'
        # sleep 30
        echo 'Bootin up, babe'
        bash ./Scripts/kafka_script 
    networks:
      - apache_kafka
    ports:
      - 3000:3000
    working_dir: /apache_kafka
    volumes:
     - .:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    hostname: schema-registry
    container_name: schema-registry
    networks:
      - apache_kafka
    depends_on:
     - broker
     - zookeeper
    ports:
     - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  connect:
    image: confluentinc/cp-kafka-connect-base:6.2.0
    build:
      context: .
      dockerfile: Dockerfile.connect
    hostname: connect
    container_name: connect
    working_dir: /apache_kafka
    networks:
      - apache_kafka
    depends_on:
      - broker
      - zookeeper
    ports:
      - "8083:8083"
    # entrypoint:
    #   - bash
    #   - -c
    #   - |
    #     echo 'Zzzzzz. . .'
    #     sleep 40
    #     # below is for debugging
    #     # sleep 20
    #     bash ./Scripts/connect_script
      #   # Need to replace this with a new Base Image
      #   confluent-hub install --no-prompt #NEED CONNECT DRIVER HERE
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:9092'
      CONNECT_GROUP_ID: mysql
      CONNECT_CONFIG_STORAGE_TOPIC: _connect_config
      CONNECT_OFFSET_STORAGE_TOPIC: _connect_offset
      CONNECT_STATUS_STORAGE_TOPIC: _connect_status
      CONNECT_CONFIG_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_REPLICATION_FACTOR: 1
      CONNECT_STATUS_REPLICATION_FACTOR: 1
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://localhost:8081'
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.storage.StringConverter'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'localhost'


  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:6.2.0
  #   hostname: control-center
  #   container_name: control-center
  #   networks:
  #     - apache_kafka
  #   depends_on:
  #     - zookeeper
  #     - broker
  #     - schema-registry
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
  #     CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1

  mysql:
    image: mysql:5.7
    container_name: mysql
    networks:
     - apache_kafka
    volumes:
     - root-access:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos

volumes:
  root-access: